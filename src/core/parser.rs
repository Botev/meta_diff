// Generated by rust-peg. Do not edit.
#![allow(non_snake_case, unused)]
macro_rules! result_err {
 ($input:ident , $state:ident , $msg:expr) => {
     {
         let (line, col) = pos_to_line($input, $state.max_err_pos);  
         Err(ParseError{line: line, column: col, offset: $state.max_err_pos, 
             expected: HashSet::new(), msg: Some($msg)})
     }
 };
}
use super::graph::*;
use std::collections::{HashMap, HashSet};
use self::RuleResult::{Matched, Failed};
fn escape_default(s: &str) -> String {
    s.chars().flat_map(|c| c.escape_default()).collect()
}
fn char_range_at(s: &str, pos: usize) -> (char, usize) {
    let c = &s[pos..].chars().next().unwrap();
    let next_pos = pos + c.len_utf8();
    (*c, next_pos)
}
#[derive(Clone)]
enum RuleResult<T> { Matched(usize, T), Failed, }
impl <T> RuleResult<T> {
    fn unwrap(self) -> T {
        match self {
            Matched(usize, a) => a,
            Failed => panic!("Unwrap failed on RuleResult"),
        }
    }
}
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct ParseError {
    pub line: usize,
    pub column: usize,
    pub offset: usize,
    pub expected: ::std::collections::HashSet<String>,
    pub msg: Option<String>,
}
pub type ParseResult<T> = Result<T, ParseError>;
impl ::std::fmt::Display for ParseError {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter)
     -> ::std::result::Result<(), ::std::fmt::Error> {
        match self.msg {
            Some(ref msg) => {
                return write!(fmt , "Error at {}:{}: {}" , self . line , self
                              . column , msg);
            }
            None => (),
        }
        try!(write ! (
             fmt , "Error at {}:{}: expected " , self . line , self . column
             ));
        if self.expected.len() == 1 {
            try!(write ! (
                 fmt , "`{}`" , escape_default (
                 self . expected . iter (  ) . next (  ) . unwrap (  ) ) ));
        } else {
            let mut iter = self.expected.iter();
            try!(write ! (
                 fmt , "one of `{}`" , escape_default (
                 iter . next (  ) . unwrap (  ) ) ));
            for elem in iter {
                try!(write ! ( fmt , ", `{}`" , escape_default ( elem ) ));
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for ParseError {
    fn description(&self) -> &str { "parse error" }
}
fn slice_eq(input: &str, state: &mut ParseState, pos: usize, m: String)
 -> RuleResult<()> {
    #![inline]
    #![allow(dead_code)]
    let l = m.len();
    if input.len() >= pos + l &&
           &input.as_bytes()[pos..pos + l] == m.as_bytes() {
        Matched(pos + l, ())
    } else { state.mark_failure(pos, m) }
}
fn slice_eq_case_insensitive(input: &str, state: &mut ParseState, pos: usize,
                             m: String) -> RuleResult<()> {
    #![inline]
    #![allow(dead_code)]
    let mut used = 0usize;
    let mut input_iter = input[pos..].chars().flat_map(|x| x.to_uppercase());
    for m_char_upper in m.chars().flat_map(|x| x.to_uppercase()) {
        used += m_char_upper.len_utf8();
        let input_char_result = input_iter.next();
        if input_char_result.is_none() ||
               input_char_result.unwrap() != m_char_upper {
            return state.mark_failure(pos, m.clone());
        }
    }
    Matched(pos + used, ())
}
fn any_char(input: &str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    #![inline]
    #![allow(dead_code)]
    if input.len() > pos {
        let (_, next) = char_range_at(input, pos);
        Matched(next, ())
    } else { state.mark_failure(pos, "<character>".to_string()) }
}
fn pos_to_line(input: &str, pos: usize) -> (usize, usize) {
    let mut remaining = pos;
    let mut lineno: usize = 1;
    for line in input.lines() {
        let line_length = line.len() + 1;
        if remaining < line_length { return (lineno, remaining + 1); }
        remaining -= line_length;
        lineno += 1;
    }
    return (lineno, remaining + 1);
}
struct ParseState {
    max_err_pos: usize,
    expected: ::std::collections::HashSet<String>,
    context: ::std::rc::Rc<::std::cell::RefCell<ContextObjects>>,
}
struct ContextObjects {
    dummy: (),
    graph_res_ctx: Result<ComputeGraph, ParseError>,
    variable_table_ctx: HashMap<String, usize>,
}
impl ParseState {
    fn new() -> ParseState {
        ParseState{max_err_pos: 0,
                   expected: ::std::collections::HashSet::new(),
                   context:
                       ::std::rc::Rc::new(::std::cell::RefCell::new(ContextObjects{dummy:
                                                                                       (),
                                                                                   graph_res_ctx:
                                                                                       spawn_context_graph_res("",
                                                                                                               0).unwrap(),
                                                                                   variable_table_ctx:
                                                                                       spawn_context_variable_table("",
                                                                                                                    0).unwrap(),})),}
    }
    fn mark_failure(&mut self, pos: usize, expected: String)
     -> RuleResult<()> {
        if pos > self.max_err_pos {
            self.max_err_pos = pos;
            self.expected.clear();
        }
        if pos == self.max_err_pos { self.expected.insert(expected); }
        Failed
    }
}
fn spawn_context_graph_res<'input>(input: &'input str, pos: usize)
 -> RuleResult<Result<ComputeGraph, ParseError>> {
    { Matched(pos, { Ok(ComputeGraph::new()) }) }
}
fn spawn_context_variable_table<'input>(input: &'input str, pos: usize)
 -> RuleResult<HashMap<String, usize>> {
    { Matched(pos, { HashMap::new() }) }
}
fn parse_metaFile<'input>(input: &'input str, state: &mut ParseState,
                          pos: usize)
 -> RuleResult<Result<ComputeGraph, ParseError>> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_functionDefinition(input, state, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let _context = state.context.clone();
                        let mut _context = &mut *_context.borrow_mut();
                        {
                            let graph_res = &mut _context.graph_res_ctx;
                            {
                                {
                                    let variable_table =
                                        &mut _context.variable_table_ctx;
                                    {
                                        {
                                            let match_str =
                                                &input[start_pos..pos];
                                            Matched(pos,
                                                    { graph_res.clone() })
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_functionDefinition<'input>(input: &'input str,
                                    state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let mut repeat_pos = pos;
                    loop  {
                        let pos = repeat_pos;
                        let step_res =
                            {
                                let choice_res = parse_eol(input, state, pos);
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed => parse___(input, state, pos),
                                }
                            };
                        match step_res {
                            Matched(newpos, value) => { repeat_pos = newpos; }
                            Failed => { break ; }
                        }
                    }
                    Matched(repeat_pos, ())
                };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = parse_FUNCTION(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res = parse___(input, state, pos);
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    parse_functionReturn(input,
                                                                         state,
                                                                         pos);
                                                match seq_res {
                                                    Matched(pos, outputs) => {
                                                        {
                                                            let seq_res =
                                                                match parse___(input,
                                                                               state,
                                                                               pos)
                                                                    {
                                                                    Matched(newpos,
                                                                            value)
                                                                    => {
                                                                        Matched(newpos,
                                                                                Some(value))
                                                                    }
                                                                    Failed =>
                                                                    {
                                                                        Matched(pos,
                                                                                None)
                                                                    }
                                                                };
                                                            match seq_res {
                                                                Matched(pos,
                                                                        _) =>
                                                                {
                                                                    {
                                                                        let seq_res =
                                                                            parse_EQ(input,
                                                                                     state,
                                                                                     pos);
                                                                        match seq_res
                                                                            {
                                                                            Matched(pos,
                                                                                    _)
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        match parse___(input,
                                                                                                       state,
                                                                                                       pos)
                                                                                            {
                                                                                            Matched(newpos,
                                                                                                    value)
                                                                                            =>
                                                                                            {
                                                                                                Matched(newpos,
                                                                                                        Some(value))
                                                                                            }
                                                                                            Failed
                                                                                            =>
                                                                                            {
                                                                                                Matched(pos,
                                                                                                        None)
                                                                                            }
                                                                                        };
                                                                                    match seq_res
                                                                                        {
                                                                                        Matched(pos,
                                                                                                _)
                                                                                        =>
                                                                                        {
                                                                                            {
                                                                                                let seq_res =
                                                                                                    parse_ID(input,
                                                                                                             state,
                                                                                                             pos);
                                                                                                match seq_res
                                                                                                    {
                                                                                                    Matched(pos,
                                                                                                            main)
                                                                                                    =>
                                                                                                    {
                                                                                                        {
                                                                                                            let seq_res =
                                                                                                                match parse___(input,
                                                                                                                               state,
                                                                                                                               pos)
                                                                                                                    {
                                                                                                                    Matched(newpos,
                                                                                                                            value)
                                                                                                                    =>
                                                                                                                    {
                                                                                                                        Matched(newpos,
                                                                                                                                Some(value))
                                                                                                                    }
                                                                                                                    Failed
                                                                                                                    =>
                                                                                                                    {
                                                                                                                        Matched(pos,
                                                                                                                                None)
                                                                                                                    }
                                                                                                                };
                                                                                                            match seq_res
                                                                                                                {
                                                                                                                Matched(pos,
                                                                                                                        _)
                                                                                                                =>
                                                                                                                {
                                                                                                                    {
                                                                                                                        let seq_res =
                                                                                                                            parse_mainParamList(input,
                                                                                                                                                state,
                                                                                                                                                pos);
                                                                                                                        match seq_res
                                                                                                                            {
                                                                                                                            Matched(pos,
                                                                                                                                    _)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    let seq_res =
                                                                                                                                        parse_eol(input,
                                                                                                                                                  state,
                                                                                                                                                  pos);
                                                                                                                                    match seq_res
                                                                                                                                        {
                                                                                                                                        Matched(pos,
                                                                                                                                                _)
                                                                                                                                        =>
                                                                                                                                        {
                                                                                                                                            {
                                                                                                                                                let seq_res =
                                                                                                                                                    parse_statementList(input,
                                                                                                                                                                        state,
                                                                                                                                                                        pos);
                                                                                                                                                match seq_res
                                                                                                                                                    {
                                                                                                                                                    Matched(pos,
                                                                                                                                                            _)
                                                                                                                                                    =>
                                                                                                                                                    {
                                                                                                                                                        {
                                                                                                                                                            let seq_res =
                                                                                                                                                                parse_END(input,
                                                                                                                                                                          state,
                                                                                                                                                                          pos);
                                                                                                                                                            match seq_res
                                                                                                                                                                {
                                                                                                                                                                Matched(pos,
                                                                                                                                                                        _)
                                                                                                                                                                =>
                                                                                                                                                                {
                                                                                                                                                                    {
                                                                                                                                                                        let seq_res =
                                                                                                                                                                            {
                                                                                                                                                                                let mut repeat_pos =
                                                                                                                                                                                    pos;
                                                                                                                                                                                loop 
                                                                                                                                                                                     {
                                                                                                                                                                                    let pos =
                                                                                                                                                                                        repeat_pos;
                                                                                                                                                                                    let step_res =
                                                                                                                                                                                        {
                                                                                                                                                                                            let choice_res =
                                                                                                                                                                                                parse_eol(input,
                                                                                                                                                                                                          state,
                                                                                                                                                                                                          pos);
                                                                                                                                                                                            match choice_res
                                                                                                                                                                                                {
                                                                                                                                                                                                Matched(pos,
                                                                                                                                                                                                        value)
                                                                                                                                                                                                =>
                                                                                                                                                                                                Matched(pos,
                                                                                                                                                                                                        value),
                                                                                                                                                                                                Failed
                                                                                                                                                                                                =>
                                                                                                                                                                                                parse___(input,
                                                                                                                                                                                                         state,
                                                                                                                                                                                                         pos),
                                                                                                                                                                                            }
                                                                                                                                                                                        };
                                                                                                                                                                                    match step_res
                                                                                                                                                                                        {
                                                                                                                                                                                        Matched(newpos,
                                                                                                                                                                                                value)
                                                                                                                                                                                        =>
                                                                                                                                                                                        {
                                                                                                                                                                                            repeat_pos
                                                                                                                                                                                                =
                                                                                                                                                                                                newpos;
                                                                                                                                                                                        }
                                                                                                                                                                                        Failed
                                                                                                                                                                                        =>
                                                                                                                                                                                        {
                                                                                                                                                                                            break
                                                                                                                                                                                                ;
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                Matched(repeat_pos,
                                                                                                                                                                                        ())
                                                                                                                                                                            };
                                                                                                                                                                        match seq_res
                                                                                                                                                                            {
                                                                                                                                                                            Matched(pos,
                                                                                                                                                                                    _)
                                                                                                                                                                            =>
                                                                                                                                                                            {
                                                                                                                                                                                {
                                                                                                                                                                                    let _context =
                                                                                                                                                                                        state.context.clone();
                                                                                                                                                                                    let mut _context =
                                                                                                                                                                                        &mut *_context.borrow_mut();
                                                                                                                                                                                    {
                                                                                                                                                                                        let graph_res =
                                                                                                                                                                                            &mut _context.graph_res_ctx;
                                                                                                                                                                                        {
                                                                                                                                                                                            {
                                                                                                                                                                                                let variable_table =
                                                                                                                                                                                                    &mut _context.variable_table_ctx;
                                                                                                                                                                                                {
                                                                                                                                                                                                    {
                                                                                                                                                                                                        let match_str =
                                                                                                                                                                                                            &input[start_pos..pos];
                                                                                                                                                                                                        Matched(pos,
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    let mut result:
                                                                                                                                                                                                                            Result<(),
                                                                                                                                                                                                                                   ParseError> =
                                                                                                                                                                                                                        Ok(());
                                                                                                                                                                                                                    match *graph_res
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                        Ok(ref mut graph)
                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            graph.name
                                                                                                                                                                                                                                =
                                                                                                                                                                                                                                main;
                                                                                                                                                                                                                            for output
                                                                                                                                                                                                                                in
                                                                                                                                                                                                                                outputs.iter()
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                match variable_table.get(output)
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                    Some(id)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        graph.outputs.push(*id);
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    None
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        result
                                                                                                                                                                                                                                            =
                                                                                                                                                                                                                                            result_err!(input
                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                        state
                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                        format
                                                                                                                                                                                                                                                        !
                                                                                                                                                                                                                                                        (
                                                                                                                                                                                                                                                        "Output variable \'{}\' has not been defined"
                                                                                                                                                                                                                                                        ,
                                                                                                                                                                                                                                                        output
                                                                                                                                                                                                                                                        ));
                                                                                                                                                                                                                                        break
                                                                                                                                                                                                                                            ;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            graph.target
                                                                                                                                                                                                                                =
                                                                                                                                                                                                                                graph.outputs[0];
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        Err(ref msg)
                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            result
                                                                                                                                                                                                                                =
                                                                                                                                                                                                                                Err(msg.clone());
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    match result
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                        Ok(_)
                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                        (),
                                                                                                                                                                                                                        Err(msg)
                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            *graph_res
                                                                                                                                                                                                                                =
                                                                                                                                                                                                                                Err(msg);
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                })
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            Failed
                                                                                                                                                                            =>
                                                                                                                                                                            Failed,
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                Failed
                                                                                                                                                                =>
                                                                                                                                                                Failed,
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    Failed
                                                                                                                                                    =>
                                                                                                                                                    Failed,
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        Failed
                                                                                                                                        =>
                                                                                                                                        Failed,
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            Failed
                                                                                                                            =>
                                                                                                                            Failed,
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                Failed
                                                                                                                =>
                                                                                                                Failed,
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    Failed
                                                                                                    =>
                                                                                                    Failed,
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        Failed
                                                                                        =>
                                                                                        Failed,
                                                                                    }
                                                                                }
                                                                            }
                                                                            Failed
                                                                            =>
                                                                            Failed,
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_functionReturn<'input>(input: &'input str, state: &mut ParseState,
                                pos: usize) -> RuleResult<Vec<String>> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_LSBRACE(input, state, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            match parse___(input, state, pos) {
                                Matched(newpos, value) => {
                                    Matched(newpos, Some(value))
                                }
                                Failed => { Matched(pos, None) }
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        {
                                            let mut repeat_pos = pos;
                                            let mut repeat_value = vec!();
                                            loop  {
                                                let pos = repeat_pos;
                                                let pos =
                                                    if repeat_value.len() > 0
                                                       {
                                                        let sep_res =
                                                            {
                                                                let seq_res =
                                                                    match parse___(input,
                                                                                   state,
                                                                                   pos)
                                                                        {
                                                                        Matched(newpos,
                                                                                value)
                                                                        => {
                                                                            Matched(newpos,
                                                                                    Some(value))
                                                                        }
                                                                        Failed
                                                                        => {
                                                                            Matched(pos,
                                                                                    None)
                                                                        }
                                                                    };
                                                                match seq_res
                                                                    {
                                                                    Matched(pos,
                                                                            _)
                                                                    => {
                                                                        parse_COMMA(input,
                                                                                    state,
                                                                                    pos)
                                                                    }
                                                                    Failed =>
                                                                    Failed,
                                                                }
                                                            };
                                                        match sep_res {
                                                            Matched(newpos, _)
                                                            => {
                                                                newpos
                                                            }
                                                            Failed => break ,
                                                        }
                                                    } else { pos };
                                                let step_res =
                                                    parse_ID(input, state,
                                                             pos);
                                                match step_res {
                                                    Matched(newpos, value) =>
                                                    {
                                                        repeat_pos = newpos;
                                                        repeat_value.push(value);
                                                    }
                                                    Failed => { break ; }
                                                }
                                            }
                                            if repeat_value.len() >= 1usize {
                                                Matched(repeat_pos,
                                                        repeat_value)
                                            } else { Failed }
                                        };
                                    match seq_res {
                                        Matched(pos, ids) => {
                                            {
                                                let seq_res =
                                                    match parse___(input,
                                                                   state, pos)
                                                        {
                                                        Matched(newpos, value)
                                                        => {
                                                            Matched(newpos,
                                                                    Some(value))
                                                        }
                                                        Failed => {
                                                            Matched(pos, None)
                                                        }
                                                    };
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_RSBRACE(input,
                                                                              state,
                                                                              pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        _) =>
                                                                {
                                                                    {
                                                                        let _context =
                                                                            state.context.clone();
                                                                        let mut _context =
                                                                            &mut *_context.borrow_mut();
                                                                        {
                                                                            let graph_res =
                                                                                &mut _context.graph_res_ctx;
                                                                            {
                                                                                {
                                                                                    let variable_table =
                                                                                        &mut _context.variable_table_ctx;
                                                                                    {
                                                                                        {
                                                                                            let match_str =
                                                                                                &input[start_pos..pos];
                                                                                            Matched(pos,
                                                                                                    {
                                                                                                        ids
                                                                                                    })
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_mainParamList<'input>(input: &'input str, state: &mut ParseState,
                               pos: usize) -> RuleResult<()> {
    {
        let seq_res = parse_LPAREN(input, state, pos);
        match seq_res {
            Matched(pos, _) => {
                {
                    let seq_res =
                        match parse___(input, state, pos) {
                            Matched(newpos, value) => {
                                Matched(newpos, Some(value))
                            }
                            Failed => { Matched(pos, None) }
                        };
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let seq_res =
                                    {
                                        let mut repeat_pos = pos;
                                        let mut repeat_value = vec!();
                                        loop  {
                                            let pos = repeat_pos;
                                            let pos =
                                                if repeat_value.len() > 0 {
                                                    let sep_res =
                                                        {
                                                            let seq_res =
                                                                match parse___(input,
                                                                               state,
                                                                               pos)
                                                                    {
                                                                    Matched(newpos,
                                                                            value)
                                                                    => {
                                                                        Matched(newpos,
                                                                                Some(value))
                                                                    }
                                                                    Failed =>
                                                                    {
                                                                        Matched(pos,
                                                                                None)
                                                                    }
                                                                };
                                                            match seq_res {
                                                                Matched(pos,
                                                                        _) =>
                                                                {
                                                                    parse_COMMA(input,
                                                                                state,
                                                                                pos)
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        };
                                                    match sep_res {
                                                        Matched(newpos, _) =>
                                                        {
                                                            newpos
                                                        }
                                                        Failed => break ,
                                                    }
                                                } else { pos };
                                            let step_res =
                                                parse_inputVar(input, state,
                                                               pos);
                                            match step_res {
                                                Matched(newpos, value) => {
                                                    repeat_pos = newpos;
                                                    repeat_value.push(value);
                                                }
                                                Failed => { break ; }
                                            }
                                        }
                                        if repeat_value.len() >= 1usize {
                                            Matched(repeat_pos, ())
                                        } else { Failed }
                                    };
                                match seq_res {
                                    Matched(pos, _) => {
                                        {
                                            let seq_res =
                                                match parse___(input, state,
                                                               pos) {
                                                    Matched(newpos, value) =>
                                                    {
                                                        Matched(newpos,
                                                                Some(value))
                                                    }
                                                    Failed => {
                                                        Matched(pos, None)
                                                    }
                                                };
                                            match seq_res {
                                                Matched(pos, _) => {
                                                    parse_RPAREN(input, state,
                                                                 pos)
                                                }
                                                Failed => Failed,
                                            }
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            }
            Failed => Failed,
        }
    }
}
fn parse_inputVar<'input>(input: &'input str, state: &mut ParseState,
                          pos: usize) -> RuleResult<()> {
    {
        let start_pos = pos;
        {
            let seq_res =
                match parse_AT(input, state, pos) {
                    Matched(newpos, value) => { Matched(newpos, Some(value)) }
                    Failed => { Matched(pos, None) }
                };
            match seq_res {
                Matched(pos, param) => {
                    {
                        let seq_res = parse_ID(input, state, pos);
                        match seq_res {
                            Matched(pos, name) => {
                                {
                                    let _context = state.context.clone();
                                    let mut _context =
                                        &mut *_context.borrow_mut();
                                    {
                                        let graph_res =
                                            &mut _context.graph_res_ctx;
                                        {
                                            {
                                                let variable_table =
                                                    &mut _context.variable_table_ctx;
                                                {
                                                    {
                                                        let match_str =
                                                            &input[start_pos..pos];
                                                        Matched(pos,
                                                                {
                                                                    if ComputeGraph::is_function_name(&name)
                                                                       {
                                                                        *graph_res
                                                                            =
                                                                            result_err!(input
                                                                                        ,
                                                                                        state
                                                                                        ,
                                                                                        format
                                                                                        !
                                                                                        (
                                                                                        "Can not have a variable with name \'{}\' since it is a built in function"
                                                                                        ,
                                                                                        name
                                                                                        ))
                                                                    } else {
                                                                        match *graph_res
                                                                            {
                                                                            Ok(ref mut graph)
                                                                            =>
                                                                            match param
                                                                                {
                                                                                Some(_)
                                                                                =>
                                                                                {
                                                                                    variable_table.insert(name.clone(),
                                                                                                          graph.add_parameter(name));
                                                                                    ()
                                                                                }
                                                                                None
                                                                                =>
                                                                                {
                                                                                    variable_table.insert(name.clone(),
                                                                                                          graph.add_const_input(name));
                                                                                    ()
                                                                                }
                                                                            },
                                                                            Err(_)
                                                                            =>
                                                                            (),
                                                                        }
                                                                    }
                                                                })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_statementList<'input>(input: &'input str, state: &mut ParseState,
                               pos: usize) -> RuleResult<()> {
    {
        let seq_res =
            {
                let mut repeat_pos = pos;
                loop  {
                    let pos = repeat_pos;
                    let step_res =
                        {
                            let seq_res =
                                {
                                    let mut repeat_pos = pos;
                                    loop  {
                                        let pos = repeat_pos;
                                        let step_res =
                                            {
                                                let choice_res =
                                                    parse_eol(input, state,
                                                              pos);
                                                match choice_res {
                                                    Matched(pos, value) =>
                                                    Matched(pos, value),
                                                    Failed => {
                                                        let choice_res =
                                                            parse_comment(input,
                                                                          state,
                                                                          pos);
                                                        match choice_res {
                                                            Matched(pos,
                                                                    value) =>
                                                            Matched(pos,
                                                                    value),
                                                            Failed =>
                                                            parse___(input,
                                                                     state,
                                                                     pos),
                                                        }
                                                    }
                                                }
                                            };
                                        match step_res {
                                            Matched(newpos, value) => {
                                                repeat_pos = newpos;
                                            }
                                            Failed => { break ; }
                                        }
                                    }
                                    Matched(repeat_pos, ())
                                };
                            match seq_res {
                                Matched(pos, _) => {
                                    parse_statement(input, state, pos)
                                }
                                Failed => Failed,
                            }
                        };
                    match step_res {
                        Matched(newpos, value) => { repeat_pos = newpos; }
                        Failed => { break ; }
                    }
                }
                Matched(repeat_pos, ())
            };
        match seq_res {
            Matched(pos, _) => {
                {
                    let mut repeat_pos = pos;
                    loop  {
                        let pos = repeat_pos;
                        let step_res =
                            {
                                let choice_res = parse_eol(input, state, pos);
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed => {
                                        let choice_res =
                                            parse_comment(input, state, pos);
                                        match choice_res {
                                            Matched(pos, value) =>
                                            Matched(pos, value),
                                            Failed =>
                                            parse___(input, state, pos),
                                        }
                                    }
                                }
                            };
                        match step_res {
                            Matched(newpos, value) => { repeat_pos = newpos; }
                            Failed => { break ; }
                        }
                    }
                    Matched(repeat_pos, ())
                }
            }
            Failed => Failed,
        }
    }
}
fn parse_statement<'input>(input: &'input str, state: &mut ParseState,
                           pos: usize) -> RuleResult<()> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_ID(input, state, pos);
            match seq_res {
                Matched(pos, name) => {
                    {
                        let seq_res =
                            match parse___(input, state, pos) {
                                Matched(newpos, value) => {
                                    Matched(newpos, Some(value))
                                }
                                Failed => { Matched(pos, None) }
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res = parse_EQ(input, state, pos);
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    match parse___(input,
                                                                   state, pos)
                                                        {
                                                        Matched(newpos, value)
                                                        => {
                                                            Matched(newpos,
                                                                    Some(value))
                                                        }
                                                        Failed => {
                                                            Matched(pos, None)
                                                        }
                                                    };
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_expression(input,
                                                                                 state,
                                                                                 pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        id) =>
                                                                {
                                                                    {
                                                                        let seq_res =
                                                                            match parse___(input,
                                                                                           state,
                                                                                           pos)
                                                                                {
                                                                                Matched(newpos,
                                                                                        value)
                                                                                =>
                                                                                {
                                                                                    Matched(newpos,
                                                                                            Some(value))
                                                                                }
                                                                                Failed
                                                                                =>
                                                                                {
                                                                                    Matched(pos,
                                                                                            None)
                                                                                }
                                                                            };
                                                                        match seq_res
                                                                            {
                                                                            Matched(pos,
                                                                                    _)
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        parse_SEMI(input,
                                                                                                   state,
                                                                                                   pos);
                                                                                    match seq_res
                                                                                        {
                                                                                        Matched(pos,
                                                                                                _)
                                                                                        =>
                                                                                        {
                                                                                            {
                                                                                                let _context =
                                                                                                    state.context.clone();
                                                                                                let mut _context =
                                                                                                    &mut *_context.borrow_mut();
                                                                                                {
                                                                                                    let graph_res =
                                                                                                        &mut _context.graph_res_ctx;
                                                                                                    {
                                                                                                        {
                                                                                                            let variable_table =
                                                                                                                &mut _context.variable_table_ctx;
                                                                                                            {
                                                                                                                {
                                                                                                                    let match_str =
                                                                                                                        &input[start_pos..pos];
                                                                                                                    Matched(pos,
                                                                                                                            {
                                                                                                                                let result =
                                                                                                                                    match *graph_res
                                                                                                                                        {
                                                                                                                                        Ok(ref mut graph)
                                                                                                                                        =>
                                                                                                                                        {
                                                                                                                                            if ComputeGraph::is_function_name(&name)
                                                                                                                                               {
                                                                                                                                                result_err!(input
                                                                                                                                                            ,
                                                                                                                                                            state
                                                                                                                                                            ,
                                                                                                                                                            format
                                                                                                                                                            !
                                                                                                                                                            (
                                                                                                                                                            "Can not have a variable with name \'{}\' since it is a built in function"
                                                                                                                                                            ,
                                                                                                                                                            name
                                                                                                                                                            ))
                                                                                                                                            } else {
                                                                                                                                                variable_table.insert(name,
                                                                                                                                                                      id);
                                                                                                                                                Ok(())
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        Err(ref msg)
                                                                                                                                        =>
                                                                                                                                        Err(msg.clone()),
                                                                                                                                    };
                                                                                                                                match result
                                                                                                                                    {
                                                                                                                                    Ok(var)
                                                                                                                                    =>
                                                                                                                                    var,
                                                                                                                                    Err(msg)
                                                                                                                                    =>
                                                                                                                                    {
                                                                                                                                        *graph_res
                                                                                                                                            =
                                                                                                                                            Err(msg);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            })
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        Failed
                                                                                        =>
                                                                                        Failed,
                                                                                    }
                                                                                }
                                                                            }
                                                                            Failed
                                                                            =>
                                                                            Failed,
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_g1<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    {
        let choice_res = parse_NEQ(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = parse_DOUBLE_EQ(input, state, pos);
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res = parse_GRTE(input, state, pos);
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => {
                                let choice_res = parse_GRT(input, state, pos);
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed => {
                                        let choice_res =
                                            parse_LSTE(input, state, pos);
                                        match choice_res {
                                            Matched(pos, value) =>
                                            Matched(pos, value),
                                            Failed =>
                                            parse_LST(input, state, pos),
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_g2<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<Operator> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_PLUS(input, state, pos);
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let _context = state.context.clone();
                                let mut _context =
                                    &mut *_context.borrow_mut();
                                {
                                    let graph_res =
                                        &mut _context.graph_res_ctx;
                                    {
                                        {
                                            let variable_table =
                                                &mut _context.variable_table_ctx;
                                            {
                                                {
                                                    let match_str =
                                                        &input[start_pos..pos];
                                                    Matched(pos,
                                                            {
                                                                Operator::Add(Vec::new())
                                                            })
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let start_pos = pos;
                {
                    let seq_res = parse_MINUS(input, state, pos);
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let _context = state.context.clone();
                                let mut _context =
                                    &mut *_context.borrow_mut();
                                {
                                    let graph_res =
                                        &mut _context.graph_res_ctx;
                                    {
                                        {
                                            let variable_table =
                                                &mut _context.variable_table_ctx;
                                            {
                                                {
                                                    let match_str =
                                                        &input[start_pos..pos];
                                                    Matched(pos,
                                                            {
                                                                Operator::Neg(0)
                                                            })
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            }
        }
    }
}
fn parse_g3<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<Operator> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_TIMES(input, state, pos);
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let _context = state.context.clone();
                                let mut _context =
                                    &mut *_context.borrow_mut();
                                {
                                    let graph_res =
                                        &mut _context.graph_res_ctx;
                                    {
                                        {
                                            let variable_table =
                                                &mut _context.variable_table_ctx;
                                            {
                                                {
                                                    let match_str =
                                                        &input[start_pos..pos];
                                                    Matched(pos,
                                                            {
                                                                Operator::Mul(Vec::new())
                                                            })
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let start_pos = pos;
                {
                    let seq_res = parse_DIVISION(input, state, pos);
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let _context = state.context.clone();
                                let mut _context =
                                    &mut *_context.borrow_mut();
                                {
                                    let graph_res =
                                        &mut _context.graph_res_ctx;
                                    {
                                        {
                                            let variable_table =
                                                &mut _context.variable_table_ctx;
                                            {
                                                {
                                                    let match_str =
                                                        &input[start_pos..pos];
                                                    Matched(pos,
                                                            {
                                                                Operator::Div(0)
                                                            })
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            }
        }
    }
}
fn parse_expression<'input>(input: &'input str, state: &mut ParseState,
                            pos: usize) -> RuleResult<usize> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let mut repeat_pos = pos;
                    let mut repeat_value = vec!();
                    loop  {
                        let pos = repeat_pos;
                        let pos =
                            if repeat_value.len() > 0 {
                                let sep_res =
                                    {
                                        let seq_res =
                                            match parse___(input, state, pos)
                                                {
                                                Matched(newpos, value) => {
                                                    Matched(newpos,
                                                            Some(value))
                                                }
                                                Failed => {
                                                    Matched(pos, None)
                                                }
                                            };
                                        match seq_res {
                                            Matched(pos, _) => {
                                                {
                                                    let seq_res =
                                                        parse_g1(input, state,
                                                                 pos);
                                                    match seq_res {
                                                        Matched(pos, _) => {
                                                            match parse___(input,
                                                                           state,
                                                                           pos)
                                                                {
                                                                Matched(newpos,
                                                                        value)
                                                                => {
                                                                    Matched(newpos,
                                                                            Some(value))
                                                                }
                                                                Failed => {
                                                                    Matched(pos,
                                                                            None)
                                                                }
                                                            }
                                                        }
                                                        Failed => Failed,
                                                    }
                                                }
                                            }
                                            Failed => Failed,
                                        }
                                    };
                                match sep_res {
                                    Matched(newpos, _) => { newpos }
                                    Failed => break ,
                                }
                            } else { pos };
                        let step_res = parse_e1(input, state, pos);
                        match step_res {
                            Matched(newpos, value) => {
                                repeat_pos = newpos;
                                repeat_value.push(value);
                            }
                            Failed => { break ; }
                        }
                    }
                    if repeat_value.len() >= 1usize {
                        Matched(repeat_pos, repeat_value)
                    } else { Failed }
                };
            match seq_res {
                Matched(pos, vars) => {
                    {
                        let _context = state.context.clone();
                        let mut _context = &mut *_context.borrow_mut();
                        {
                            let graph_res = &mut _context.graph_res_ctx;
                            {
                                {
                                    let variable_table =
                                        &mut _context.variable_table_ctx;
                                    {
                                        {
                                            let match_str =
                                                &input[start_pos..pos];
                                            Matched(pos,
                                                    {
                                                        let result =
                                                            match *graph_res {
                                                                Ok(ref mut graph)
                                                                =>
                                                                match vars.len()
                                                                    {
                                                                    0 =>
                                                                    unreachable!(),
                                                                    1 =>
                                                                    Ok(vars[0]),
                                                                    _ =>
                                                                    result_err!(input
                                                                                ,
                                                                                state
                                                                                ,
                                                                                "Comparison operators not supported!"
                                                                                .
                                                                                to_string
                                                                                (

                                                                                )),
                                                                },
                                                                Err(ref msg)
                                                                =>
                                                                Err(msg.clone()),
                                                            };
                                                        match result {
                                                            Ok(var) => var,
                                                            Err(msg) => {
                                                                *graph_res =
                                                                    Err(msg);
                                                                0
                                                            }
                                                        }
                                                    })
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_e1<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<usize> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_e2(input, state, pos);
            match seq_res {
                Matched(pos, first) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        {
                                            let start_pos = pos;
                                            {
                                                let seq_res =
                                                    match parse___(input,
                                                                   state, pos)
                                                        {
                                                        Matched(newpos, value)
                                                        => {
                                                            Matched(newpos,
                                                                    Some(value))
                                                        }
                                                        Failed => {
                                                            Matched(pos, None)
                                                        }
                                                    };
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_g2(input,
                                                                         state,
                                                                         pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        op) =>
                                                                {
                                                                    {
                                                                        let seq_res =
                                                                            match parse___(input,
                                                                                           state,
                                                                                           pos)
                                                                                {
                                                                                Matched(newpos,
                                                                                        value)
                                                                                =>
                                                                                {
                                                                                    Matched(newpos,
                                                                                            Some(value))
                                                                                }
                                                                                Failed
                                                                                =>
                                                                                {
                                                                                    Matched(pos,
                                                                                            None)
                                                                                }
                                                                            };
                                                                        match seq_res
                                                                            {
                                                                            Matched(pos,
                                                                                    _)
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        parse_e2(input,
                                                                                                 state,
                                                                                                 pos);
                                                                                    match seq_res
                                                                                        {
                                                                                        Matched(pos,
                                                                                                var)
                                                                                        =>
                                                                                        {
                                                                                            {
                                                                                                let _context =
                                                                                                    state.context.clone();
                                                                                                let mut _context =
                                                                                                    &mut *_context.borrow_mut();
                                                                                                {
                                                                                                    let graph_res =
                                                                                                        &mut _context.graph_res_ctx;
                                                                                                    {
                                                                                                        {
                                                                                                            let variable_table =
                                                                                                                &mut _context.variable_table_ctx;
                                                                                                            {
                                                                                                                {
                                                                                                                    let match_str =
                                                                                                                        &input[start_pos..pos];
                                                                                                                    Matched(pos,
                                                                                                                            {
                                                                                                                                let result =
                                                                                                                                    match *graph_res
                                                                                                                                        {
                                                                                                                                        Ok(ref mut graph)
                                                                                                                                        =>
                                                                                                                                        match op
                                                                                                                                            {
                                                                                                                                            Operator::Add(_)
                                                                                                                                            =>
                                                                                                                                            Ok(var),
                                                                                                                                            Operator::Neg(_)
                                                                                                                                            =>
                                                                                                                                            match graph.add_operation(Operator::Neg(var))
                                                                                                                                                {
                                                                                                                                                Ok(var)
                                                                                                                                                =>
                                                                                                                                                Ok(var),
                                                                                                                                                Err(msg)
                                                                                                                                                =>
                                                                                                                                                result_err!(input
                                                                                                                                                            ,
                                                                                                                                                            state
                                                                                                                                                            ,
                                                                                                                                                            msg),
                                                                                                                                            },
                                                                                                                                            _
                                                                                                                                            =>
                                                                                                                                            unreachable!(),
                                                                                                                                        },
                                                                                                                                        Err(ref msg)
                                                                                                                                        =>
                                                                                                                                        Err(msg.clone()),
                                                                                                                                    };
                                                                                                                                match result
                                                                                                                                    {
                                                                                                                                    Ok(var)
                                                                                                                                    =>
                                                                                                                                    var,
                                                                                                                                    Err(msg)
                                                                                                                                    =>
                                                                                                                                    {
                                                                                                                                        *graph_res
                                                                                                                                            =
                                                                                                                                            Err(msg);
                                                                                                                                        0
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            })
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        Failed
                                                                                        =>
                                                                                        Failed,
                                                                                    }
                                                                                }
                                                                            }
                                                                            Failed
                                                                            =>
                                                                            Failed,
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        };
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, repeat_value)
                            };
                        match seq_res {
                            Matched(pos, rest) => {
                                {
                                    let _context = state.context.clone();
                                    let mut _context =
                                        &mut *_context.borrow_mut();
                                    {
                                        let graph_res =
                                            &mut _context.graph_res_ctx;
                                        {
                                            {
                                                let variable_table =
                                                    &mut _context.variable_table_ctx;
                                                {
                                                    {
                                                        let match_str =
                                                            &input[start_pos..pos];
                                                        Matched(pos,
                                                                {
                                                                    let result =
                                                                        match *graph_res
                                                                            {
                                                                            Ok(ref mut graph)
                                                                            =>
                                                                            match rest.len()
                                                                                {
                                                                                0
                                                                                =>
                                                                                Ok(first),
                                                                                _
                                                                                =>
                                                                                {
                                                                                    let mut vars =
                                                                                        vec!(first);
                                                                                    vars.extend(rest);
                                                                                    match graph.add_operation(Operator::Add(vars))
                                                                                        {
                                                                                        Ok(var)
                                                                                        =>
                                                                                        Ok(var),
                                                                                        Err(msg)
                                                                                        =>
                                                                                        result_err!(input
                                                                                                    ,
                                                                                                    state
                                                                                                    ,
                                                                                                    msg),
                                                                                    }
                                                                                }
                                                                            },
                                                                            Err(ref msg)
                                                                            =>
                                                                            Err(msg.clone()),
                                                                        };
                                                                    match result
                                                                        {
                                                                        Ok(var)
                                                                        =>
                                                                        var,
                                                                        Err(msg)
                                                                        => {
                                                                            *graph_res
                                                                                =
                                                                                Err(msg);
                                                                            0
                                                                        }
                                                                    }
                                                                })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_e2<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<usize> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_e3(input, state, pos);
            match seq_res {
                Matched(pos, first) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        {
                                            let start_pos = pos;
                                            {
                                                let seq_res =
                                                    match parse___(input,
                                                                   state, pos)
                                                        {
                                                        Matched(newpos, value)
                                                        => {
                                                            Matched(newpos,
                                                                    Some(value))
                                                        }
                                                        Failed => {
                                                            Matched(pos, None)
                                                        }
                                                    };
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_g3(input,
                                                                         state,
                                                                         pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        op) =>
                                                                {
                                                                    {
                                                                        let seq_res =
                                                                            match parse___(input,
                                                                                           state,
                                                                                           pos)
                                                                                {
                                                                                Matched(newpos,
                                                                                        value)
                                                                                =>
                                                                                {
                                                                                    Matched(newpos,
                                                                                            Some(value))
                                                                                }
                                                                                Failed
                                                                                =>
                                                                                {
                                                                                    Matched(pos,
                                                                                            None)
                                                                                }
                                                                            };
                                                                        match seq_res
                                                                            {
                                                                            Matched(pos,
                                                                                    _)
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        parse_e3(input,
                                                                                                 state,
                                                                                                 pos);
                                                                                    match seq_res
                                                                                        {
                                                                                        Matched(pos,
                                                                                                var)
                                                                                        =>
                                                                                        {
                                                                                            {
                                                                                                let _context =
                                                                                                    state.context.clone();
                                                                                                let mut _context =
                                                                                                    &mut *_context.borrow_mut();
                                                                                                {
                                                                                                    let graph_res =
                                                                                                        &mut _context.graph_res_ctx;
                                                                                                    {
                                                                                                        {
                                                                                                            let variable_table =
                                                                                                                &mut _context.variable_table_ctx;
                                                                                                            {
                                                                                                                {
                                                                                                                    let match_str =
                                                                                                                        &input[start_pos..pos];
                                                                                                                    Matched(pos,
                                                                                                                            {
                                                                                                                                let result =
                                                                                                                                    match *graph_res
                                                                                                                                        {
                                                                                                                                        Ok(ref mut graph)
                                                                                                                                        =>
                                                                                                                                        match op
                                                                                                                                            {
                                                                                                                                            Operator::Mul(_)
                                                                                                                                            =>
                                                                                                                                            Ok(var),
                                                                                                                                            Operator::Div(_)
                                                                                                                                            =>
                                                                                                                                            match graph.add_operation(Operator::Div(var))
                                                                                                                                                {
                                                                                                                                                Ok(var)
                                                                                                                                                =>
                                                                                                                                                Ok(var),
                                                                                                                                                Err(msg)
                                                                                                                                                =>
                                                                                                                                                result_err!(input
                                                                                                                                                            ,
                                                                                                                                                            state
                                                                                                                                                            ,
                                                                                                                                                            msg),
                                                                                                                                            },
                                                                                                                                            _
                                                                                                                                            =>
                                                                                                                                            unreachable!(),
                                                                                                                                        },
                                                                                                                                        Err(ref msg)
                                                                                                                                        =>
                                                                                                                                        Err(msg.clone()),
                                                                                                                                    };
                                                                                                                                match result
                                                                                                                                    {
                                                                                                                                    Ok(var)
                                                                                                                                    =>
                                                                                                                                    var,
                                                                                                                                    Err(msg)
                                                                                                                                    =>
                                                                                                                                    {
                                                                                                                                        *graph_res
                                                                                                                                            =
                                                                                                                                            Err(msg);
                                                                                                                                        0
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            })
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        Failed
                                                                                        =>
                                                                                        Failed,
                                                                                    }
                                                                                }
                                                                            }
                                                                            Failed
                                                                            =>
                                                                            Failed,
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        };
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, repeat_value)
                            };
                        match seq_res {
                            Matched(pos, rest) => {
                                {
                                    let _context = state.context.clone();
                                    let mut _context =
                                        &mut *_context.borrow_mut();
                                    {
                                        let graph_res =
                                            &mut _context.graph_res_ctx;
                                        {
                                            {
                                                let variable_table =
                                                    &mut _context.variable_table_ctx;
                                                {
                                                    {
                                                        let match_str =
                                                            &input[start_pos..pos];
                                                        Matched(pos,
                                                                {
                                                                    let result =
                                                                        match *graph_res
                                                                            {
                                                                            Ok(ref mut graph)
                                                                            =>
                                                                            match rest.len()
                                                                                {
                                                                                0
                                                                                =>
                                                                                Ok(first),
                                                                                _
                                                                                =>
                                                                                {
                                                                                    let mut vars =
                                                                                        vec!(first);
                                                                                    vars.extend(rest);
                                                                                    match graph.add_operation(Operator::Mul(vars))
                                                                                        {
                                                                                        Ok(var)
                                                                                        =>
                                                                                        Ok(var),
                                                                                        Err(msg)
                                                                                        =>
                                                                                        result_err!(input
                                                                                                    ,
                                                                                                    state
                                                                                                    ,
                                                                                                    msg),
                                                                                    }
                                                                                }
                                                                            },
                                                                            Err(ref msg)
                                                                            =>
                                                                            Err(msg.clone()),
                                                                        };
                                                                    match result
                                                                        {
                                                                        Ok(var)
                                                                        =>
                                                                        var,
                                                                        Err(msg)
                                                                        => {
                                                                            *graph_res
                                                                                =
                                                                                Err(msg);
                                                                            0
                                                                        }
                                                                    }
                                                                })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_e3<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<usize> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let mut repeat_pos = pos;
                    let mut repeat_value = vec!();
                    loop  {
                        let pos = repeat_pos;
                        let pos =
                            if repeat_value.len() > 0 {
                                let sep_res =
                                    {
                                        let seq_res =
                                            match parse___(input, state, pos)
                                                {
                                                Matched(newpos, value) => {
                                                    Matched(newpos,
                                                            Some(value))
                                                }
                                                Failed => {
                                                    Matched(pos, None)
                                                }
                                            };
                                        match seq_res {
                                            Matched(pos, _) => {
                                                {
                                                    let seq_res =
                                                        parse_DOT_PRODUCT(input,
                                                                          state,
                                                                          pos);
                                                    match seq_res {
                                                        Matched(pos, _) => {
                                                            match parse___(input,
                                                                           state,
                                                                           pos)
                                                                {
                                                                Matched(newpos,
                                                                        value)
                                                                => {
                                                                    Matched(newpos,
                                                                            Some(value))
                                                                }
                                                                Failed => {
                                                                    Matched(pos,
                                                                            None)
                                                                }
                                                            }
                                                        }
                                                        Failed => Failed,
                                                    }
                                                }
                                            }
                                            Failed => Failed,
                                        }
                                    };
                                match sep_res {
                                    Matched(newpos, _) => { newpos }
                                    Failed => break ,
                                }
                            } else { pos };
                        let step_res = parse_e4(input, state, pos);
                        match step_res {
                            Matched(newpos, value) => {
                                repeat_pos = newpos;
                                repeat_value.push(value);
                            }
                            Failed => { break ; }
                        }
                    }
                    if repeat_value.len() >= 1usize {
                        Matched(repeat_pos, repeat_value)
                    } else { Failed }
                };
            match seq_res {
                Matched(pos, vars) => {
                    {
                        let _context = state.context.clone();
                        let mut _context = &mut *_context.borrow_mut();
                        {
                            let graph_res = &mut _context.graph_res_ctx;
                            {
                                {
                                    let variable_table =
                                        &mut _context.variable_table_ctx;
                                    {
                                        {
                                            let match_str =
                                                &input[start_pos..pos];
                                            Matched(pos,
                                                    {
                                                        let result =
                                                            match *graph_res {
                                                                Ok(ref mut graph)
                                                                =>
                                                                match vars.len()
                                                                    {
                                                                    0 =>
                                                                    unreachable!(),
                                                                    1 =>
                                                                    Ok(vars[0]),
                                                                    _ =>
                                                                    match graph.add_operation(Operator::Dot(vars))
                                                                        {
                                                                        Ok(var)
                                                                        =>
                                                                        Ok(var),
                                                                        Err(msg)
                                                                        =>
                                                                        result_err!(input
                                                                                    ,
                                                                                    state
                                                                                    ,
                                                                                    msg),
                                                                    },
                                                                },
                                                                Err(ref msg)
                                                                =>
                                                                Err(msg.clone()),
                                                            };
                                                        match result {
                                                            Ok(var) => var,
                                                            Err(msg) => {
                                                                *graph_res =
                                                                    Err(msg);
                                                                0
                                                            }
                                                        }
                                                    })
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_e4<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<usize> {
    {
        let start_pos = pos;
        {
            let seq_res =
                match parse_MINUS(input, state, pos) {
                    Matched(newpos, value) => { Matched(newpos, Some(value)) }
                    Failed => { Matched(pos, None) }
                };
            match seq_res {
                Matched(pos, m) => {
                    {
                        let seq_res =
                            match parse___(input, state, pos) {
                                Matched(newpos, value) => {
                                    Matched(newpos, Some(value))
                                }
                                Failed => { Matched(pos, None) }
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res = parse_e5(input, state, pos);
                                    match seq_res {
                                        Matched(pos, var) => {
                                            {
                                                let _context =
                                                    state.context.clone();
                                                let mut _context =
                                                    &mut *_context.borrow_mut();
                                                {
                                                    let graph_res =
                                                        &mut _context.graph_res_ctx;
                                                    {
                                                        {
                                                            let variable_table =
                                                                &mut _context.variable_table_ctx;
                                                            {
                                                                {
                                                                    let match_str =
                                                                        &input[start_pos..pos];
                                                                    Matched(pos,
                                                                            {
                                                                                let result =
                                                                                    match *graph_res
                                                                                        {
                                                                                        Ok(ref mut graph)
                                                                                        =>
                                                                                        match m
                                                                                            {
                                                                                            Some(_)
                                                                                            =>
                                                                                            match graph.add_operation(Operator::Neg(var))
                                                                                                {
                                                                                                Ok(var)
                                                                                                =>
                                                                                                Ok(var),
                                                                                                Err(msg)
                                                                                                =>
                                                                                                result_err!(input
                                                                                                            ,
                                                                                                            state
                                                                                                            ,
                                                                                                            msg),
                                                                                            },
                                                                                            None
                                                                                            =>
                                                                                            Ok(var),
                                                                                        },
                                                                                        Err(ref msg)
                                                                                        =>
                                                                                        Err(msg.clone()),
                                                                                    };
                                                                                match result
                                                                                    {
                                                                                    Ok(var)
                                                                                    =>
                                                                                    var,
                                                                                    Err(msg)
                                                                                    =>
                                                                                    {
                                                                                        *graph_res
                                                                                            =
                                                                                            Err(msg);
                                                                                        0
                                                                                    }
                                                                                }
                                                                            })
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_e5<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<usize> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_e6(input, state, pos);
            match seq_res {
                Matched(pos, first) => {
                    {
                        let seq_res =
                            match {
                                      let start_pos = pos;
                                      {
                                          let seq_res =
                                              match parse___(input, state,
                                                             pos) {
                                                  Matched(newpos, value) => {
                                                      Matched(newpos,
                                                              Some(value))
                                                  }
                                                  Failed => {
                                                      Matched(pos, None)
                                                  }
                                              };
                                          match seq_res {
                                              Matched(pos, _) => {
                                                  {
                                                      let seq_res =
                                                          parse_EXP(input,
                                                                    state,
                                                                    pos);
                                                      match seq_res {
                                                          Matched(pos, _) => {
                                                              {
                                                                  let seq_res =
                                                                      match parse___(input,
                                                                                     state,
                                                                                     pos)
                                                                          {
                                                                          Matched(newpos,
                                                                                  value)
                                                                          => {
                                                                              Matched(newpos,
                                                                                      Some(value))
                                                                          }
                                                                          Failed
                                                                          => {
                                                                              Matched(pos,
                                                                                      None)
                                                                          }
                                                                      };
                                                                  match seq_res
                                                                      {
                                                                      Matched(pos,
                                                                              _)
                                                                      => {
                                                                          {
                                                                              let seq_res =
                                                                                  parse_e6(input,
                                                                                           state,
                                                                                           pos);
                                                                              match seq_res
                                                                                  {
                                                                                  Matched(pos,
                                                                                          var)
                                                                                  =>
                                                                                  {
                                                                                      {
                                                                                          let _context =
                                                                                              state.context.clone();
                                                                                          let mut _context =
                                                                                              &mut *_context.borrow_mut();
                                                                                          {
                                                                                              let graph_res =
                                                                                                  &mut _context.graph_res_ctx;
                                                                                              {
                                                                                                  {
                                                                                                      let variable_table =
                                                                                                          &mut _context.variable_table_ctx;
                                                                                                      {
                                                                                                          {
                                                                                                              let match_str =
                                                                                                                  &input[start_pos..pos];
                                                                                                              Matched(pos,
                                                                                                                      {
                                                                                                                          var
                                                                                                                      })
                                                                                                          }
                                                                                                      }
                                                                                                  }
                                                                                              }
                                                                                          }
                                                                                      }
                                                                                  }
                                                                                  Failed
                                                                                  =>
                                                                                  Failed,
                                                                              }
                                                                          }
                                                                      }
                                                                      Failed
                                                                      =>
                                                                      Failed,
                                                                  }
                                                              }
                                                          }
                                                          Failed => Failed,
                                                      }
                                                  }
                                              }
                                              Failed => Failed,
                                          }
                                      }
                                  } {
                                Matched(newpos, value) => {
                                    Matched(newpos, Some(value))
                                }
                                Failed => { Matched(pos, None) }
                            };
                        match seq_res {
                            Matched(pos, second) => {
                                {
                                    let _context = state.context.clone();
                                    let mut _context =
                                        &mut *_context.borrow_mut();
                                    {
                                        let graph_res =
                                            &mut _context.graph_res_ctx;
                                        {
                                            {
                                                let variable_table =
                                                    &mut _context.variable_table_ctx;
                                                {
                                                    {
                                                        let match_str =
                                                            &input[start_pos..pos];
                                                        Matched(pos,
                                                                {
                                                                    let result =
                                                                        match *graph_res
                                                                            {
                                                                            Ok(ref mut graph)
                                                                            =>
                                                                            match second
                                                                                {
                                                                                Some(id)
                                                                                =>
                                                                                match graph.add_operation(Operator::Pow(first,
                                                                                                                        id))
                                                                                    {
                                                                                    Ok(var)
                                                                                    =>
                                                                                    Ok(var),
                                                                                    Err(msg)
                                                                                    =>
                                                                                    result_err!(input
                                                                                                ,
                                                                                                state
                                                                                                ,
                                                                                                msg),
                                                                                },
                                                                                None
                                                                                =>
                                                                                Ok(first),
                                                                            },
                                                                            Err(ref msg)
                                                                            =>
                                                                            Err(msg.clone()),
                                                                        };
                                                                    match result
                                                                        {
                                                                        Ok(var)
                                                                        =>
                                                                        var,
                                                                        Err(msg)
                                                                        => {
                                                                            *graph_res
                                                                                =
                                                                                Err(msg);
                                                                            0
                                                                        }
                                                                    }
                                                                })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_e6<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<usize> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_unaryExpression(input, state, pos);
            match seq_res {
                Matched(pos, var) => {
                    {
                        let seq_res =
                            match parse_TRANSPOSE(input, state, pos) {
                                Matched(newpos, value) => {
                                    Matched(newpos, Some(value))
                                }
                                Failed => { Matched(pos, None) }
                            };
                        match seq_res {
                            Matched(pos, tr) => {
                                {
                                    let _context = state.context.clone();
                                    let mut _context =
                                        &mut *_context.borrow_mut();
                                    {
                                        let graph_res =
                                            &mut _context.graph_res_ctx;
                                        {
                                            {
                                                let variable_table =
                                                    &mut _context.variable_table_ctx;
                                                {
                                                    {
                                                        let match_str =
                                                            &input[start_pos..pos];
                                                        Matched(pos,
                                                                {
                                                                    let mut result =
                                                                        match *graph_res
                                                                            {
                                                                            Ok(ref mut graph)
                                                                            =>
                                                                            match tr
                                                                                {
                                                                                Some(_)
                                                                                =>
                                                                                match graph.add_operation(Operator::Transpose(var))
                                                                                    {
                                                                                    Ok(var)
                                                                                    =>
                                                                                    Ok(var),
                                                                                    Err(msg)
                                                                                    =>
                                                                                    result_err!(input
                                                                                                ,
                                                                                                state
                                                                                                ,
                                                                                                msg),
                                                                                },
                                                                                None
                                                                                =>
                                                                                Ok(var),
                                                                            },
                                                                            Err(ref msg)
                                                                            =>
                                                                            Err(msg.clone()),
                                                                        };
                                                                    match result
                                                                        {
                                                                        Ok(var)
                                                                        =>
                                                                        var,
                                                                        Err(msg)
                                                                        => {
                                                                            *graph_res
                                                                                =
                                                                                Err(msg);
                                                                            0
                                                                        }
                                                                    }
                                                                })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_unaryExpression<'input>(input: &'input str, state: &mut ParseState,
                                 pos: usize) -> RuleResult<usize> {
    {
        let choice_res = parse_baseExpression(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let start_pos = pos;
                {
                    let seq_res = parse_LPAREN(input, state, pos);
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let seq_res =
                                    match parse___(input, state, pos) {
                                        Matched(newpos, value) => {
                                            Matched(newpos, Some(value))
                                        }
                                        Failed => { Matched(pos, None) }
                                    };
                                match seq_res {
                                    Matched(pos, _) => {
                                        {
                                            let seq_res =
                                                parse_expression(input, state,
                                                                 pos);
                                            match seq_res {
                                                Matched(pos, e) => {
                                                    {
                                                        let seq_res =
                                                            match parse___(input,
                                                                           state,
                                                                           pos)
                                                                {
                                                                Matched(newpos,
                                                                        value)
                                                                => {
                                                                    Matched(newpos,
                                                                            Some(value))
                                                                }
                                                                Failed => {
                                                                    Matched(pos,
                                                                            None)
                                                                }
                                                            };
                                                        match seq_res {
                                                            Matched(pos, _) =>
                                                            {
                                                                {
                                                                    let seq_res =
                                                                        parse_RPAREN(input,
                                                                                     state,
                                                                                     pos);
                                                                    match seq_res
                                                                        {
                                                                        Matched(pos,
                                                                                _)
                                                                        => {
                                                                            {
                                                                                let _context =
                                                                                    state.context.clone();
                                                                                let mut _context =
                                                                                    &mut *_context.borrow_mut();
                                                                                {
                                                                                    let graph_res =
                                                                                        &mut _context.graph_res_ctx;
                                                                                    {
                                                                                        {
                                                                                            let variable_table =
                                                                                                &mut _context.variable_table_ctx;
                                                                                            {
                                                                                                {
                                                                                                    let match_str =
                                                                                                        &input[start_pos..pos];
                                                                                                    Matched(pos,
                                                                                                            {
                                                                                                                e
                                                                                                            })
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        Failed
                                                                        =>
                                                                        Failed,
                                                                    }
                                                                }
                                                            }
                                                            Failed => Failed,
                                                        }
                                                    }
                                                }
                                                Failed => Failed,
                                            }
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            }
        }
    }
}
fn parse_baseExpression<'input>(input: &'input str, state: &mut ParseState,
                                pos: usize) -> RuleResult<usize> {
    {
        let choice_res = parse_NUMBER(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = parse_indexedVar(input, state, pos);
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res = parse_varDotFunc(input, state, pos);
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => {
                                let choice_res =
                                    parse_funcCall(input, state, pos);
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed => {
                                        let start_pos = pos;
                                        {
                                            let seq_res =
                                                parse_ID(input, state, pos);
                                            match seq_res {
                                                Matched(pos, name) => {
                                                    {
                                                        let _context =
                                                            state.context.clone();
                                                        let mut _context =
                                                            &mut *_context.borrow_mut();
                                                        {
                                                            let graph_res =
                                                                &mut _context.graph_res_ctx;
                                                            {
                                                                {
                                                                    let variable_table =
                                                                        &mut _context.variable_table_ctx;
                                                                    {
                                                                        {
                                                                            let match_str =
                                                                                &input[start_pos..pos];
                                                                            Matched(pos,
                                                                                    {
                                                                                        let result =
                                                                                            match *graph_res
                                                                                                {
                                                                                                Ok(ref mut graph)
                                                                                                =>
                                                                                                match variable_table.get(&name)
                                                                                                    {
                                                                                                    Some(id)
                                                                                                    =>
                                                                                                    Ok(*id),
                                                                                                    None
                                                                                                    =>
                                                                                                    result_err!(input
                                                                                                                ,
                                                                                                                state
                                                                                                                ,
                                                                                                                format
                                                                                                                !
                                                                                                                (
                                                                                                                "Use of undefined variable \'{}\'"
                                                                                                                ,
                                                                                                                name
                                                                                                                )),
                                                                                                },
                                                                                                Err(ref msg)
                                                                                                =>
                                                                                                Err(msg.clone()),
                                                                                            };
                                                                                        match result
                                                                                            {
                                                                                            Ok(var)
                                                                                            =>
                                                                                            var,
                                                                                            Err(msg)
                                                                                            =>
                                                                                            {
                                                                                                *graph_res
                                                                                                    =
                                                                                                    Err(msg);
                                                                                                0
                                                                                            }
                                                                                        }
                                                                                    })
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                Failed => Failed,
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_indexedVar<'input>(input: &'input str, state: &mut ParseState,
                            pos: usize) -> RuleResult<usize> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_ID(input, state, pos);
            match seq_res {
                Matched(pos, name) => {
                    {
                        let seq_res = parse_LSBRACE(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        match parse___(input, state, pos) {
                                            Matched(newpos, value) => {
                                                Matched(newpos, Some(value))
                                            }
                                            Failed => { Matched(pos, None) }
                                        };
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    parse_expression(input,
                                                                     state,
                                                                     pos);
                                                match seq_res {
                                                    Matched(pos, arg1) => {
                                                        {
                                                            let seq_res =
                                                                match parse___(input,
                                                                               state,
                                                                               pos)
                                                                    {
                                                                    Matched(newpos,
                                                                            value)
                                                                    => {
                                                                        Matched(newpos,
                                                                                Some(value))
                                                                    }
                                                                    Failed =>
                                                                    {
                                                                        Matched(pos,
                                                                                None)
                                                                    }
                                                                };
                                                            match seq_res {
                                                                Matched(pos,
                                                                        _) =>
                                                                {
                                                                    {
                                                                        let seq_res =
                                                                            parse_COMMA(input,
                                                                                        state,
                                                                                        pos);
                                                                        match seq_res
                                                                            {
                                                                            Matched(pos,
                                                                                    _)
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        match parse___(input,
                                                                                                       state,
                                                                                                       pos)
                                                                                            {
                                                                                            Matched(newpos,
                                                                                                    value)
                                                                                            =>
                                                                                            {
                                                                                                Matched(newpos,
                                                                                                        Some(value))
                                                                                            }
                                                                                            Failed
                                                                                            =>
                                                                                            {
                                                                                                Matched(pos,
                                                                                                        None)
                                                                                            }
                                                                                        };
                                                                                    match seq_res
                                                                                        {
                                                                                        Matched(pos,
                                                                                                _)
                                                                                        =>
                                                                                        {
                                                                                            {
                                                                                                let seq_res =
                                                                                                    parse_expression(input,
                                                                                                                     state,
                                                                                                                     pos);
                                                                                                match seq_res
                                                                                                    {
                                                                                                    Matched(pos,
                                                                                                            arg2)
                                                                                                    =>
                                                                                                    {
                                                                                                        {
                                                                                                            let seq_res =
                                                                                                                match parse___(input,
                                                                                                                               state,
                                                                                                                               pos)
                                                                                                                    {
                                                                                                                    Matched(newpos,
                                                                                                                            value)
                                                                                                                    =>
                                                                                                                    {
                                                                                                                        Matched(newpos,
                                                                                                                                Some(value))
                                                                                                                    }
                                                                                                                    Failed
                                                                                                                    =>
                                                                                                                    {
                                                                                                                        Matched(pos,
                                                                                                                                None)
                                                                                                                    }
                                                                                                                };
                                                                                                            match seq_res
                                                                                                                {
                                                                                                                Matched(pos,
                                                                                                                        _)
                                                                                                                =>
                                                                                                                {
                                                                                                                    {
                                                                                                                        let seq_res =
                                                                                                                            parse_COMMA(input,
                                                                                                                                        state,
                                                                                                                                        pos);
                                                                                                                        match seq_res
                                                                                                                            {
                                                                                                                            Matched(pos,
                                                                                                                                    _)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    let seq_res =
                                                                                                                                        match parse___(input,
                                                                                                                                                       state,
                                                                                                                                                       pos)
                                                                                                                                            {
                                                                                                                                            Matched(newpos,
                                                                                                                                                    value)
                                                                                                                                            =>
                                                                                                                                            {
                                                                                                                                                Matched(newpos,
                                                                                                                                                        Some(value))
                                                                                                                                            }
                                                                                                                                            Failed
                                                                                                                                            =>
                                                                                                                                            {
                                                                                                                                                Matched(pos,
                                                                                                                                                        None)
                                                                                                                                            }
                                                                                                                                        };
                                                                                                                                    match seq_res
                                                                                                                                        {
                                                                                                                                        Matched(pos,
                                                                                                                                                _)
                                                                                                                                        =>
                                                                                                                                        {
                                                                                                                                            {
                                                                                                                                                let seq_res =
                                                                                                                                                    parse_expression(input,
                                                                                                                                                                     state,
                                                                                                                                                                     pos);
                                                                                                                                                match seq_res
                                                                                                                                                    {
                                                                                                                                                    Matched(pos,
                                                                                                                                                            arg3)
                                                                                                                                                    =>
                                                                                                                                                    {
                                                                                                                                                        {
                                                                                                                                                            let seq_res =
                                                                                                                                                                match parse___(input,
                                                                                                                                                                               state,
                                                                                                                                                                               pos)
                                                                                                                                                                    {
                                                                                                                                                                    Matched(newpos,
                                                                                                                                                                            value)
                                                                                                                                                                    =>
                                                                                                                                                                    {
                                                                                                                                                                        Matched(newpos,
                                                                                                                                                                                Some(value))
                                                                                                                                                                    }
                                                                                                                                                                    Failed
                                                                                                                                                                    =>
                                                                                                                                                                    {
                                                                                                                                                                        Matched(pos,
                                                                                                                                                                                None)
                                                                                                                                                                    }
                                                                                                                                                                };
                                                                                                                                                            match seq_res
                                                                                                                                                                {
                                                                                                                                                                Matched(pos,
                                                                                                                                                                        _)
                                                                                                                                                                =>
                                                                                                                                                                {
                                                                                                                                                                    {
                                                                                                                                                                        let seq_res =
                                                                                                                                                                            parse_COMMA(input,
                                                                                                                                                                                        state,
                                                                                                                                                                                        pos);
                                                                                                                                                                        match seq_res
                                                                                                                                                                            {
                                                                                                                                                                            Matched(pos,
                                                                                                                                                                                    _)
                                                                                                                                                                            =>
                                                                                                                                                                            {
                                                                                                                                                                                {
                                                                                                                                                                                    let seq_res =
                                                                                                                                                                                        match parse___(input,
                                                                                                                                                                                                       state,
                                                                                                                                                                                                       pos)
                                                                                                                                                                                            {
                                                                                                                                                                                            Matched(newpos,
                                                                                                                                                                                                    value)
                                                                                                                                                                                            =>
                                                                                                                                                                                            {
                                                                                                                                                                                                Matched(newpos,
                                                                                                                                                                                                        Some(value))
                                                                                                                                                                                            }
                                                                                                                                                                                            Failed
                                                                                                                                                                                            =>
                                                                                                                                                                                            {
                                                                                                                                                                                                Matched(pos,
                                                                                                                                                                                                        None)
                                                                                                                                                                                            }
                                                                                                                                                                                        };
                                                                                                                                                                                    match seq_res
                                                                                                                                                                                        {
                                                                                                                                                                                        Matched(pos,
                                                                                                                                                                                                _)
                                                                                                                                                                                        =>
                                                                                                                                                                                        {
                                                                                                                                                                                            {
                                                                                                                                                                                                let seq_res =
                                                                                                                                                                                                    parse_expression(input,
                                                                                                                                                                                                                     state,
                                                                                                                                                                                                                     pos);
                                                                                                                                                                                                match seq_res
                                                                                                                                                                                                    {
                                                                                                                                                                                                    Matched(pos,
                                                                                                                                                                                                            arg4)
                                                                                                                                                                                                    =>
                                                                                                                                                                                                    {
                                                                                                                                                                                                        {
                                                                                                                                                                                                            let seq_res =
                                                                                                                                                                                                                match parse___(input,
                                                                                                                                                                                                                               state,
                                                                                                                                                                                                                               pos)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                    Matched(newpos,
                                                                                                                                                                                                                            value)
                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        Matched(newpos,
                                                                                                                                                                                                                                Some(value))
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    Failed
                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        Matched(pos,
                                                                                                                                                                                                                                None)
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                };
                                                                                                                                                                                                            match seq_res
                                                                                                                                                                                                                {
                                                                                                                                                                                                                Matched(pos,
                                                                                                                                                                                                                        _)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        let seq_res =
                                                                                                                                                                                                                            parse_RSBRACE(input,
                                                                                                                                                                                                                                          state,
                                                                                                                                                                                                                                          pos);
                                                                                                                                                                                                                        match seq_res
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                            Matched(pos,
                                                                                                                                                                                                                                    _)
                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    let _context =
                                                                                                                                                                                                                                        state.context.clone();
                                                                                                                                                                                                                                    let mut _context =
                                                                                                                                                                                                                                        &mut *_context.borrow_mut();
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        let graph_res =
                                                                                                                                                                                                                                            &mut _context.graph_res_ctx;
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                let variable_table =
                                                                                                                                                                                                                                                    &mut _context.variable_table_ctx;
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        let match_str =
                                                                                                                                                                                                                                                            &input[start_pos..pos];
                                                                                                                                                                                                                                                        Matched(pos,
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    let result =
                                                                                                                                                                                                                                                                        match *graph_res
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                            Ok(ref mut graph)
                                                                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                                                                            match variable_table.get(&name)
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                Some(id)
                                                                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                                                                match graph.add_operation(Operator::SubIndex(*id,
                                                                                                                                                                                                                                                                                                                             arg1,
                                                                                                                                                                                                                                                                                                                             arg2,
                                                                                                                                                                                                                                                                                                                             arg3,
                                                                                                                                                                                                                                                                                                                             arg4))
                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                    Ok(var)
                                                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                                                    Ok(var),
                                                                                                                                                                                                                                                                                    Err(msg)
                                                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                                                    result_err!(input
                                                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                                                state
                                                                                                                                                                                                                                                                                                ,
                                                                                                                                                                                                                                                                                                msg),
                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                None
                                                                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                                                                result_err!(input
                                                                                                                                                                                                                                                                                            ,
                                                                                                                                                                                                                                                                                            state
                                                                                                                                                                                                                                                                                            ,
                                                                                                                                                                                                                                                                                            format
                                                                                                                                                                                                                                                                                            !
                                                                                                                                                                                                                                                                                            (
                                                                                                                                                                                                                                                                                            "Use of undefined variable \'{}\'"
                                                                                                                                                                                                                                                                                            ,
                                                                                                                                                                                                                                                                                            name
                                                                                                                                                                                                                                                                                            )),
                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                            Err(ref msg)
                                                                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                                                                            Err(msg.clone()),
                                                                                                                                                                                                                                                                        };
                                                                                                                                                                                                                                                                    match result
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                        Ok(var)
                                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                                        var,
                                                                                                                                                                                                                                                                        Err(msg)
                                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            *graph_res
                                                                                                                                                                                                                                                                                =
                                                                                                                                                                                                                                                                                Err(msg);
                                                                                                                                                                                                                                                                            0
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                })
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            Failed
                                                                                                                                                                                                                            =>
                                                                                                                                                                                                                            Failed,
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                                Failed
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                Failed,
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    Failed
                                                                                                                                                                                                    =>
                                                                                                                                                                                                    Failed,
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        Failed
                                                                                                                                                                                        =>
                                                                                                                                                                                        Failed,
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            Failed
                                                                                                                                                                            =>
                                                                                                                                                                            Failed,
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                Failed
                                                                                                                                                                =>
                                                                                                                                                                Failed,
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    Failed
                                                                                                                                                    =>
                                                                                                                                                    Failed,
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        Failed
                                                                                                                                        =>
                                                                                                                                        Failed,
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            Failed
                                                                                                                            =>
                                                                                                                            Failed,
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                Failed
                                                                                                                =>
                                                                                                                Failed,
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    Failed
                                                                                                    =>
                                                                                                    Failed,
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        Failed
                                                                                        =>
                                                                                        Failed,
                                                                                    }
                                                                                }
                                                                            }
                                                                            Failed
                                                                            =>
                                                                            Failed,
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_varDotFunc<'input>(input: &'input str, state: &mut ParseState,
                            pos: usize) -> RuleResult<usize> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_ID(input, state, pos);
            match seq_res {
                Matched(pos, name) => {
                    {
                        let seq_res = parse_DOT(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res = parse_ID(input, state, pos);
                                    match seq_res {
                                        Matched(pos, func) => {
                                            {
                                                let seq_res =
                                                    parse_paramList(input,
                                                                    state,
                                                                    pos);
                                                match seq_res {
                                                    Matched(pos, args) => {
                                                        {
                                                            let _context =
                                                                state.context.clone();
                                                            let mut _context =
                                                                &mut *_context.borrow_mut();
                                                            {
                                                                let graph_res =
                                                                    &mut _context.graph_res_ctx;
                                                                {
                                                                    {
                                                                        let variable_table =
                                                                            &mut _context.variable_table_ctx;
                                                                        {
                                                                            {
                                                                                let match_str =
                                                                                    &input[start_pos..pos];
                                                                                Matched(pos,
                                                                                        {
                                                                                            let result =
                                                                                                match *graph_res
                                                                                                    {
                                                                                                    Ok(ref mut graph)
                                                                                                    =>
                                                                                                    match variable_table.get(&name)
                                                                                                        {
                                                                                                        Some(id)
                                                                                                        =>
                                                                                                        {
                                                                                                            let mut newargs =
                                                                                                                args.clone();
                                                                                                            newargs.insert(0,
                                                                                                                           *id);
                                                                                                            match graph.string_to_operator(func,
                                                                                                                                           newargs)
                                                                                                                {
                                                                                                                Ok(var)
                                                                                                                =>
                                                                                                                Ok(var),
                                                                                                                Err(msg)
                                                                                                                =>
                                                                                                                result_err!(input
                                                                                                                            ,
                                                                                                                            state
                                                                                                                            ,
                                                                                                                            msg),
                                                                                                            }
                                                                                                        }
                                                                                                        None
                                                                                                        =>
                                                                                                        result_err!(input
                                                                                                                    ,
                                                                                                                    state
                                                                                                                    ,
                                                                                                                    format
                                                                                                                    !
                                                                                                                    (
                                                                                                                    "Use of undefined variable \'{}\'"
                                                                                                                    ,
                                                                                                                    name
                                                                                                                    )),
                                                                                                    },
                                                                                                    Err(ref msg)
                                                                                                    =>
                                                                                                    Err(msg.clone()),
                                                                                                };
                                                                                            match result
                                                                                                {
                                                                                                Ok(var)
                                                                                                =>
                                                                                                var,
                                                                                                Err(msg)
                                                                                                =>
                                                                                                {
                                                                                                    *graph_res
                                                                                                        =
                                                                                                        Err(msg);
                                                                                                    0
                                                                                                }
                                                                                            }
                                                                                        })
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_funcCall<'input>(input: &'input str, state: &mut ParseState,
                          pos: usize) -> RuleResult<usize> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_ID(input, state, pos);
            match seq_res {
                Matched(pos, func) => {
                    {
                        let seq_res = parse_paramList(input, state, pos);
                        match seq_res {
                            Matched(pos, args) => {
                                {
                                    let _context = state.context.clone();
                                    let mut _context =
                                        &mut *_context.borrow_mut();
                                    {
                                        let graph_res =
                                            &mut _context.graph_res_ctx;
                                        {
                                            {
                                                let variable_table =
                                                    &mut _context.variable_table_ctx;
                                                {
                                                    {
                                                        let match_str =
                                                            &input[start_pos..pos];
                                                        Matched(pos,
                                                                {
                                                                    let result =
                                                                        match *graph_res
                                                                            {
                                                                            Ok(ref mut graph)
                                                                            =>
                                                                            match graph.string_to_operator(func,
                                                                                                           args)
                                                                                {
                                                                                Ok(var)
                                                                                =>
                                                                                Ok(var),
                                                                                Err(msg)
                                                                                =>
                                                                                result_err!(input
                                                                                            ,
                                                                                            state
                                                                                            ,
                                                                                            msg),
                                                                            },
                                                                            Err(ref msg)
                                                                            =>
                                                                            Err(msg.clone()),
                                                                        };
                                                                    match result
                                                                        {
                                                                        Ok(var)
                                                                        =>
                                                                        var,
                                                                        Err(msg)
                                                                        => {
                                                                            *graph_res
                                                                                =
                                                                                Err(msg);
                                                                            0
                                                                        }
                                                                    }
                                                                })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_paramList<'input>(input: &'input str, state: &mut ParseState,
                           pos: usize) -> RuleResult<Vec<usize>> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_LPAREN(input, state, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            match parse___(input, state, pos) {
                                Matched(newpos, value) => {
                                    Matched(newpos, Some(value))
                                }
                                Failed => { Matched(pos, None) }
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        {
                                            let mut repeat_pos = pos;
                                            let mut repeat_value = vec!();
                                            loop  {
                                                let pos = repeat_pos;
                                                let pos =
                                                    if repeat_value.len() > 0
                                                       {
                                                        let sep_res =
                                                            {
                                                                let seq_res =
                                                                    match parse___(input,
                                                                                   state,
                                                                                   pos)
                                                                        {
                                                                        Matched(newpos,
                                                                                value)
                                                                        => {
                                                                            Matched(newpos,
                                                                                    Some(value))
                                                                        }
                                                                        Failed
                                                                        => {
                                                                            Matched(pos,
                                                                                    None)
                                                                        }
                                                                    };
                                                                match seq_res
                                                                    {
                                                                    Matched(pos,
                                                                            _)
                                                                    => {
                                                                        {
                                                                            let seq_res =
                                                                                parse_COMMA(input,
                                                                                            state,
                                                                                            pos);
                                                                            match seq_res
                                                                                {
                                                                                Matched(pos,
                                                                                        _)
                                                                                =>
                                                                                {
                                                                                    match parse___(input,
                                                                                                   state,
                                                                                                   pos)
                                                                                        {
                                                                                        Matched(newpos,
                                                                                                value)
                                                                                        =>
                                                                                        {
                                                                                            Matched(newpos,
                                                                                                    Some(value))
                                                                                        }
                                                                                        Failed
                                                                                        =>
                                                                                        {
                                                                                            Matched(pos,
                                                                                                    None)
                                                                                        }
                                                                                    }
                                                                                }
                                                                                Failed
                                                                                =>
                                                                                Failed,
                                                                            }
                                                                        }
                                                                    }
                                                                    Failed =>
                                                                    Failed,
                                                                }
                                                            };
                                                        match sep_res {
                                                            Matched(newpos, _)
                                                            => {
                                                                newpos
                                                            }
                                                            Failed => break ,
                                                        }
                                                    } else { pos };
                                                let step_res =
                                                    parse_expression(input,
                                                                     state,
                                                                     pos);
                                                match step_res {
                                                    Matched(newpos, value) =>
                                                    {
                                                        repeat_pos = newpos;
                                                        repeat_value.push(value);
                                                    }
                                                    Failed => { break ; }
                                                }
                                            }
                                            Matched(repeat_pos, repeat_value)
                                        };
                                    match seq_res {
                                        Matched(pos, vars) => {
                                            {
                                                let seq_res =
                                                    match parse___(input,
                                                                   state, pos)
                                                        {
                                                        Matched(newpos, value)
                                                        => {
                                                            Matched(newpos,
                                                                    Some(value))
                                                        }
                                                        Failed => {
                                                            Matched(pos, None)
                                                        }
                                                    };
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_RPAREN(input,
                                                                             state,
                                                                             pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        _) =>
                                                                {
                                                                    {
                                                                        let _context =
                                                                            state.context.clone();
                                                                        let mut _context =
                                                                            &mut *_context.borrow_mut();
                                                                        {
                                                                            let graph_res =
                                                                                &mut _context.graph_res_ctx;
                                                                            {
                                                                                {
                                                                                    let variable_table =
                                                                                        &mut _context.variable_table_ctx;
                                                                                    {
                                                                                        {
                                                                                            let match_str =
                                                                                                &input[start_pos..pos];
                                                                                            Matched(pos,
                                                                                                    {
                                                                                                        vars
                                                                                                    })
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_END<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, "end".to_string())
}
fn parse_FUNCTION<'input>(input: &'input str, state: &mut ParseState,
                          pos: usize) -> RuleResult<()> {
    slice_eq(input, state, pos, "function".to_string())
}
fn parse_EQ<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, "=".to_string())
}
fn parse_DOUBLE_EQ<'input>(input: &'input str, state: &mut ParseState,
                           pos: usize) -> RuleResult<()> {
    slice_eq(input, state, pos, "==".to_string())
}
fn parse_NEQ<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, "~=".to_string())
}
fn parse_LST<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, "<".to_string())
}
fn parse_LSTE<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, "<=".to_string())
}
fn parse_GRT<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, ">".to_string())
}
fn parse_GRTE<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, ">=".to_string())
}
fn parse_PLUS<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, "+".to_string())
}
fn parse_MINUS<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, "-".to_string())
}
fn parse_TIMES<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, "*".to_string())
}
fn parse_DIVISION<'input>(input: &'input str, state: &mut ParseState,
                          pos: usize) -> RuleResult<()> {
    slice_eq(input, state, pos, "/".to_string())
}
fn parse_EXP<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, "^".to_string())
}
fn parse_TRANSPOSE<'input>(input: &'input str, state: &mut ParseState,
                           pos: usize) -> RuleResult<()> {
    slice_eq(input, state, pos, "\'".to_string())
}
fn parse_DOT_PRODUCT<'input>(input: &'input str, state: &mut ParseState,
                             pos: usize) -> RuleResult<()> {
    slice_eq(input, state, pos, "dot".to_string())
}
fn parse_SEMI<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, ";".to_string())
}
fn parse_LPAREN<'input>(input: &'input str, state: &mut ParseState,
                        pos: usize) -> RuleResult<()> {
    slice_eq(input, state, pos, "(".to_string())
}
fn parse_RPAREN<'input>(input: &'input str, state: &mut ParseState,
                        pos: usize) -> RuleResult<()> {
    slice_eq(input, state, pos, ")".to_string())
}
fn parse_LBRACE<'input>(input: &'input str, state: &mut ParseState,
                        pos: usize) -> RuleResult<()> {
    slice_eq(input, state, pos, "{".to_string())
}
fn parse_RBRACE<'input>(input: &'input str, state: &mut ParseState,
                        pos: usize) -> RuleResult<()> {
    slice_eq(input, state, pos, "}".to_string())
}
fn parse_LSBRACE<'input>(input: &'input str, state: &mut ParseState,
                         pos: usize) -> RuleResult<()> {
    slice_eq(input, state, pos, "[".to_string())
}
fn parse_RSBRACE<'input>(input: &'input str, state: &mut ParseState,
                         pos: usize) -> RuleResult<()> {
    slice_eq(input, state, pos, "]".to_string())
}
fn parse_AT<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, "@".to_string())
}
fn parse_DOT<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, ".".to_string())
}
fn parse_COMMA<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    slice_eq(input, state, pos, ",".to_string())
}
fn parse_ID<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res =
                if input.len() > pos {
                    let (ch, next) = char_range_at(input, pos);
                    match ch {
                        'a' ...'z' | 'A' ...'Z' => Matched(next, ()),
                        _ => state.mark_failure(pos, "[a-zA-Z]".to_string()),
                    }
                } else { state.mark_failure(pos, "[a-zA-Z]".to_string()) };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        if input.len() > pos {
                                            let (ch, next) =
                                                char_range_at(input, pos);
                                            match ch {
                                                'a' ...'z' | 'A' ...'Z' | '0'
                                                ...'9' | '_' =>
                                                Matched(next, ()),
                                                _ =>
                                                state.mark_failure(pos,
                                                                   "[a-zA-Z0-9_]".to_string()),
                                            }
                                        } else {
                                            state.mark_failure(pos,
                                                               "[a-zA-Z0-9_]".to_string())
                                        };
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, ())
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let _context = state.context.clone();
                                    let mut _context =
                                        &mut *_context.borrow_mut();
                                    {
                                        let graph_res =
                                            &mut _context.graph_res_ctx;
                                        {
                                            {
                                                let variable_table =
                                                    &mut _context.variable_table_ctx;
                                                {
                                                    {
                                                        let match_str =
                                                            &input[start_pos..pos];
                                                        Matched(pos,
                                                                {
                                                                    match_str.to_string()
                                                                })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_NUMBER<'input>(input: &'input str, state: &mut ParseState,
                        pos: usize) -> RuleResult<usize> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let mut repeat_pos = pos;
                    let mut repeat_value = vec!();
                    loop  {
                        let pos = repeat_pos;
                        let step_res =
                            if input.len() > pos {
                                let (ch, next) = char_range_at(input, pos);
                                match ch {
                                    '0' ...'9' => Matched(next, ()),
                                    _ =>
                                    state.mark_failure(pos,
                                                       "[0-9]".to_string()),
                                }
                            } else {
                                state.mark_failure(pos, "[0-9]".to_string())
                            };
                        match step_res {
                            Matched(newpos, value) => {
                                repeat_pos = newpos;
                                repeat_value.push(value);
                            }
                            Failed => { break ; }
                        }
                    }
                    if repeat_value.len() >= 1usize {
                        Matched(repeat_pos, ())
                    } else { Failed }
                };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            match {
                                      let seq_res =
                                          slice_eq(input, state, pos,
                                                   ".".to_string());
                                      match seq_res {
                                          Matched(pos, _) => {
                                              {
                                                  let mut repeat_pos = pos;
                                                  let mut repeat_value =
                                                      vec!();
                                                  loop  {
                                                      let pos = repeat_pos;
                                                      let step_res =
                                                          if input.len() > pos
                                                             {
                                                              let (ch, next) =
                                                                  char_range_at(input,
                                                                                pos);
                                                              match ch {
                                                                  '0' ...'9'
                                                                  =>
                                                                  Matched(next,
                                                                          ()),
                                                                  _ =>
                                                                  state.mark_failure(pos,
                                                                                     "[0-9]".to_string()),
                                                              }
                                                          } else {
                                                              state.mark_failure(pos,
                                                                                 "[0-9]".to_string())
                                                          };
                                                      match step_res {
                                                          Matched(newpos,
                                                                  value) => {
                                                              repeat_pos =
                                                                  newpos;
                                                              repeat_value.push(value);
                                                          }
                                                          Failed => {
                                                              break ;
                                                          }
                                                      }
                                                  }
                                                  if repeat_value.len() >=
                                                         1usize {
                                                      Matched(repeat_pos, ())
                                                  } else { Failed }
                                              }
                                          }
                                          Failed => Failed,
                                      }
                                  } {
                                Matched(newpos, value) => {
                                    Matched(newpos, Some(value))
                                }
                                Failed => { Matched(pos, None) }
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let _context = state.context.clone();
                                    let mut _context =
                                        &mut *_context.borrow_mut();
                                    {
                                        let graph_res =
                                            &mut _context.graph_res_ctx;
                                        {
                                            {
                                                let variable_table =
                                                    &mut _context.variable_table_ctx;
                                                {
                                                    {
                                                        let match_str =
                                                            &input[start_pos..pos];
                                                        Matched(pos,
                                                                {
                                                                    let result =
                                                                        match *graph_res
                                                                            {
                                                                            Ok(ref mut graph)
                                                                            =>
                                                                            match match_str.parse::<i64>()
                                                                                {
                                                                                Ok(value)
                                                                                =>
                                                                                Ok(graph.add_int(value)),
                                                                                Err(_)
                                                                                =>
                                                                                match match_str.parse::<f64>()
                                                                                    {
                                                                                    Ok(value)
                                                                                    =>
                                                                                    Ok(graph.add_float(value)),
                                                                                    Err(_)
                                                                                    =>
                                                                                    unreachable!(),
                                                                                },
                                                                            },
                                                                            Err(ref msg)
                                                                            =>
                                                                            Err(msg.clone()),
                                                                        };
                                                                    match result
                                                                        {
                                                                        Ok(var)
                                                                        =>
                                                                        var,
                                                                        Err(msg)
                                                                        => {
                                                                            *graph_res
                                                                                =
                                                                                Err(msg);
                                                                            0
                                                                        }
                                                                    }
                                                                })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_comment<'input>(input: &'input str, state: &mut ParseState,
                         pos: usize) -> RuleResult<()> {
    {
        let seq_res = slice_eq(input, state, pos, "%".to_string());
        match seq_res {
            Matched(pos, _) => {
                {
                    let mut repeat_pos = pos;
                    loop  {
                        let pos = repeat_pos;
                        let step_res =
                            {
                                let seq_res =
                                    {
                                        let assert_res =
                                            parse_eolChar(input, state, pos);
                                        match assert_res {
                                            Failed => Matched(pos, ()),
                                            Matched(..) => Failed,
                                        }
                                    };
                                match seq_res {
                                    Matched(pos, _) => {
                                        any_char(input, state, pos)
                                    }
                                    Failed => Failed,
                                }
                            };
                        match step_res {
                            Matched(newpos, value) => { repeat_pos = newpos; }
                            Failed => { break ; }
                        }
                    }
                    Matched(repeat_pos, ())
                }
            }
            Failed => Failed,
        }
    }
}
fn parse_eol<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    {
        let choice_res = slice_eq(input, state, pos, "\n".to_string());
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res =
                    slice_eq(input, state, pos, "\r\n".to_string());
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res =
                            slice_eq(input, state, pos, "\r".to_string());
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => {
                                let choice_res =
                                    slice_eq(input, state, pos,
                                             "\u{2028}".to_string());
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed =>
                                    slice_eq(input, state, pos,
                                             "\u{2029}".to_string()),
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_eolChar<'input>(input: &'input str, state: &mut ParseState,
                         pos: usize) -> RuleResult<()> {
    if input.len() > pos {
        let (ch, next) = char_range_at(input, pos);
        match ch {
            '\n' | '\r' | '\u{2028}' | '\u{2029}' => Matched(next, ()),
            _ =>
            state.mark_failure(pos, "[\n\r\u{2028}\u{2029}]".to_string()),
        }
    } else { state.mark_failure(pos, "[\n\r\u{2028}\u{2029}]".to_string()) }
}
fn parse___<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    if input.len() > pos {
        let (ch, next) = char_range_at(input, pos);
        match ch {
            ' ' | '\t' | '\u{a0}' | '\u{feff}' | '\u{1680}' | '\u{180e}' |
            '\u{2000}' ...'\u{200a}' | '\u{202f}' | '\u{205f}' | '\u{3000}' =>
            Matched(next, ()),
            _ =>
            state.mark_failure(pos,
                               "[ \t\u{a0}\u{feff}\u{1680}\u{180e}\u{2000}-\u{200a}\u{202f}\u{205f}\u{3000}]".to_string()),
        }
    } else {
        state.mark_failure(pos,
                           "[ \t\u{a0}\u{feff}\u{1680}\u{180e}\u{2000}-\u{200a}\u{202f}\u{205f}\u{3000}]".to_string())
    }
}
pub fn metaFile<'input>(input: &'input str)
 -> ParseResult<ComputeGraph> {
    let mut state = ParseState::new();
    match parse_metaFile(input, &mut state, 0) {
        Matched(pos, value) => { if pos == input.len() { return value } }
        _ => { }
    }
    let (line, col) = pos_to_line(input, state.max_err_pos);
    Err(ParseError{line: line,
                   column: col,
                   offset: state.max_err_pos,
                   expected: state.expected,
                   msg: None,})
}
